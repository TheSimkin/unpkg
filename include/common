#!/bin/sh

set -o nounset
test ${DEBUGGING:-'false'} = false || set -o xtrace

NAME=${NAME}
VERSION=${VERSION}

TAG=${TAG:-${VERSION}}

ORIGIN_HOST=${ORIGIN_HOST='github.com'}
ORIGIN_PATH=${ORIGIN_PATH}
ORIGIN=${ORIGIN:-"https://${ORIGIN_HOST}/${ORIGIN_PATH}"}

ROOT=${ROOT:-''}
PACKAGE_ROOT=${ROOT}/${PACKAGE:-'package'}
SOURCE_ROOT=${ROOT}/${SOURCE:-'source'}
COMMAND_ROOT=${ROOT}/${COMMAND:-'command'}

PACKAGE_DIR=${PACKAGE_ROOT}/${NAME}--${VERSION}
WORKING=${SOURCE_ROOT}/${ORIGIN_HOST}/${ORIGIN_PATH}

PREFIX=${PREFIX:-${PACKAGE_DIR}}
BINDIR=${BINDIR:-${PREFIX}/command}
LIBDIR=${LIBDIR:-${PREFIX}/library}
INCLUDEDIR=${INCLUDEDIR:-${PREFIX}/include}
MANDIR=${MANDIR:-${PREFIX}/manual}
DESTDIR=${DESTDIR:-${PACKAGE_DIR}}

if test -d /opt/gcc
then
    export PATH=${PATH}:/opt/gcc/*/bin
fi

CC=$(command -v gcc || command -v cc)
MAKE=$(command -v gmake || command -v make)
INSTALL=$(command -v ginstall || command -v install)

CFLAGS=${CFLAGS:-'-Os -fPIC'}
LDFLAGS=${LDFLAGS:-'-s'}

offline() {
    test ${OFFLINE:-'false'} != false
}

downloaded() {
    test -d ${WORKING}
}

sync() {
    if downloaded
    then
        clean
        cd ${WORKING} || exit 111
        git checkout master
        offline || git pull
    else
        offline || command git clone ${ORIGIN} ${WORKING}
    fi

    cd ${WORKING} || exit 111
    downloaded && git checkout ${TAG}
}

clean() {
    cd ${WORKING} || exit 111
    git reset --hard
    git clean -d --force
    test -n ${MAKE} && ${MAKE} clean
}

with_build_environment() {
    env \
        PREFIX="${PREFIX}" \
        BINDIR="${BINDIR}" \
        LIBDIR="${LIBDIR}" \
        INCLUDEDIR="${INCLUDEDIR}" \
        MANDIR="${MANDIR}" \
        DESTDIR="${DESTDIR}" \
        CFLAGS="${CFLAGS}" \
        LDFLAGS="${LDFLAGS}" \
        CC="${CC}" \
        INSTALL="${INSTALL}" \
        ${@:-'false'}
}

build() {
    clean
    test -n "${MAKE}" || exit 111

    with_build_environment ${MAKE}
}

installed() {
    test -d ${PACKAGE_DIR}
}

deinstall() {
    installed && rm -rf ${PACKAGE_DIR}
}

install() {
    deinstall
    test -n "${MAKE}" || exit 111
    with_build_environment ${MAKE} install
}

active() {
    basename "$(readlink ${PACKAGE_ROOT}/${NAME})"
}

activated() {
    test "$(active)" = ${NAME}--${VERSION}
}

activate() {
    if ! activated
    then
        rm -f ${PACKAGE_ROOT}/${NAME}
        ln -s ${PACKAGE_DIR} ${PACKAGE_ROOT}/${NAME}
    fi
}

entrypoint() {
    case ${1:-''} in
        s|sync) sync;;
        b|build) build;;
        i|install) install;;
        a|activate) activate;;
        all) sync && build && install && activate;;
        *)
            echo "Expected one of (sync | build | install | activate | all)" >&2
            exit 100
    esac
}
